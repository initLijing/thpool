!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
annulus	thpool.c	/^typedef struct annulus {$/;"	s	file:
annulus	thpool.c	/^}annulus;$/;"	t	typeref:struct:annulus	file:
annulus::capacity	thpool.c	/^	uint_t capacity;				\/\/队列容量$/;"	m	struct:annulus	file:	access:public
annulus::data	thpool.c	/^	void ** data;					\/\/队列数据指针$/;"	m	struct:annulus	file:	access:public
annulus::flags	thpool.c	/^	uint_t flags;					\/\/队列标识$/;"	m	struct:annulus	file:	access:public
annulus::in	thpool.c	/^	uint_t in;						\/\/输入指针$/;"	m	struct:annulus	file:	access:public
annulus::out	thpool.c	/^	uint_t out;						\/\/输出指针$/;"	m	struct:annulus	file:	access:public
annulus::qsize	thpool.c	/^	uint_t qsize;					\/\/队列元素个数$/;"	m	struct:annulus	file:	access:public
annulus_queue_destroy	thpool.c	/^annulus_queue_destroy(void *queue)$/;"	f	file:	signature:(void *queue)
annulus_queue_destroy	thpool.c	/^static void annulus_queue_destroy(void *queue);$/;"	p	file:	signature:(void *queue)
annulus_queue_init	thpool.c	/^annulus_queue_init(uint_t capacity)$/;"	f	file:	signature:(uint_t capacity)
annulus_queue_init	thpool.c	/^static annulus * annulus_queue_init(uint_t capacity);$/;"	p	file:	signature:(uint_t capacity)
annulus_queue_pull	thpool.c	/^annulus_queue_pull(void *queue)$/;"	f	file:	signature:(void *queue)
annulus_queue_pull	thpool.c	/^static void * annulus_queue_pull(void *queue);$/;"	p	file:	signature:(void *queue)
annulus_queue_push	thpool.c	/^annulus_queue_push(void * queue,void *arg)$/;"	f	file:	signature:(void * queue,void *arg)
annulus_queue_push	thpool.c	/^static int annulus_queue_push(void * queue,void *arg);$/;"	p	file:	signature:(void * queue,void *arg)
annulus_queue_size	thpool.c	/^annulus_queue_size(void *queue)$/;"	f	file:	signature:(void *queue)
annulus_queue_size	thpool.c	/^static uint_t annulus_queue_size(void * queue);$/;"	p	file:	signature:(void * queue)
appname	makefile	/^appname = pool$/;"	m
arg	thpool.h	/^	void *arg;					\/\/线程参数$/;"	m	struct:job	access:public
capacity	thpool.c	/^	uint_t capacity;				\/\/队列容量$/;"	m	struct:annulus	file:	access:public
data	thpool.c	/^	void ** data;					\/\/队列数据指针$/;"	m	struct:annulus	file:	access:public
dowork	thpool.c	/^dowork(void *arg)$/;"	f	file:	signature:(void *arg)
dowork	thpool.c	/^static void * dowork(void *arg);$/;"	p	file:	signature:(void *arg)
flags	thpool.c	/^	uint_t flags;					\/\/线程标志位$/;"	m	struct:thpool	file:	access:public
flags	thpool.c	/^	uint_t flags;					\/\/队列标识$/;"	m	struct:annulus	file:	access:public
id	thpool.c	/^	uint_t id;						\/\/线程编号$/;"	m	struct:thread	file:	access:public
in	thpool.c	/^	uint_t in;						\/\/输入指针$/;"	m	struct:annulus	file:	access:public
isExit	thpool.c	/^static int isExit = 1;$/;"	v	file:
job	thpool.h	/^typedef struct job {$/;"	s
job	thpool.h	/^}job;$/;"	t	typeref:struct:job
job::arg	thpool.h	/^	void *arg;					\/\/线程参数$/;"	m	struct:job	access:public
job::task	thpool.h	/^	void(*task)(void*);			\/\/线程ID$/;"	m	struct:job	access:public
main	test.c	/^int main()$/;"	f
mutex	test.c	/^pthread_mutex_t mutex;$/;"	v
n	test.c	/^static int n =0;$/;"	v	file:
obj	makefile	/^obj = $(patsubst %.c,%.o,$(src))$/;"	m
out	thpool.c	/^	uint_t out;						\/\/输出指针$/;"	m	struct:annulus	file:	access:public
pp	test.c	/^void pp(void *arg)$/;"	f	signature:(void *arg)
pthread	thpool.c	/^	struct thread * pthread;		\/\/线程$/;"	m	struct:thpool	typeref:struct:thpool::thread	file:	access:public
qsize	thpool.c	/^	uint_t qsize;					\/\/队列元素个数$/;"	m	struct:annulus	file:	access:public
queue	thpool.c	/^	struct annulus * queue;			\/\/队列$/;"	m	struct:thpool	typeref:struct:thpool::annulus	file:	access:public
src	makefile	/^src = $(wildcard .\/*.c)$/;"	m
task	thpool.h	/^	void(*task)(void*);			\/\/线程ID$/;"	m	struct:job	access:public
test01	test.c	/^void test01()$/;"	f
th_capa	thpool.c	/^static uint_t th_capa = 0;			\/\/线程池容量$/;"	v	file:
th_num	thpool.c	/^static uint_t th_num = 0;			\/\/线程数量$/;"	v	file:
thpool	thpool.c	/^typedef struct thpool{$/;"	s	file:
thpool	thpool.c	/^}thpool;$/;"	t	typeref:struct:thpool	file:
thpool	thpool.h	/^typedef struct thpool thpool;$/;"	t	typeref:struct:thpool
thpool::flags	thpool.c	/^	uint_t flags;					\/\/线程标志位$/;"	m	struct:thpool	file:	access:public
thpool::pthread	thpool.c	/^	struct thread * pthread;		\/\/线程$/;"	m	struct:thpool	typeref:struct:thpool::thread	file:	access:public
thpool::queue	thpool.c	/^	struct annulus * queue;			\/\/队列$/;"	m	struct:thpool	typeref:struct:thpool::annulus	file:	access:public
thpool_add_task	thpool.c	/^thpool_add_task(thpool* pool,job *job)$/;"	f	signature:(thpool* pool,job *job)
thpool_add_task	thpool.h	/^void thpool_add_task(thpool *pool, job *job);$/;"	p	signature:(thpool *pool, job *job)
thpool_add_thread	thpool.c	/^thpool_add_thread(thpool *pool,uint_t thsize)$/;"	f	signature:(thpool *pool,uint_t thsize)
thpool_add_thread	thpool.h	/^uint_t thpool_add_thread(thpool * pool, uint_t thsize);$/;"	p	signature:(thpool * pool, uint_t thsize)
thpool_destroy	thpool.c	/^thpool_destroy(thpool *pool)$/;"	f	signature:(thpool *pool)
thpool_destroy	thpool.h	/^void thpool_destroy(thpool *pool);$/;"	p	signature:(thpool *pool)
thpool_get_thread	thpool.c	/^thpool_get_thread()$/;"	f
thpool_get_thread	thpool.h	/^uint_t thpool_get_thread();$/;"	p	signature:()
thpool_init	thpool.c	/^thpool * thpool_init(uint_t capacity, uint_t thsize)$/;"	f	signature:(uint_t capacity, uint_t thsize)
thpool_init	thpool.h	/^thpool * thpool_init(uint_t capacity,uint_t thsize);$/;"	p	signature:(uint_t capacity,uint_t thsize)
thpool_num	thpool.c	/^thpool_num()$/;"	f
thpool_sub_thread	thpool.c	/^thpool_sub_thread(thpool * pool, uint_t thsize)$/;"	f	signature:(thpool * pool, uint_t thsize)
thpool_sub_thread	thpool.h	/^uint_t thpool_sub_thread(thpool * pool, uint_t thsize);$/;"	p	signature:(thpool * pool, uint_t thsize)
thread	thpool.c	/^	pthread_t thread;				\/\/线程ID$/;"	m	struct:thread	file:	access:public
thread	thpool.c	/^typedef struct thread {$/;"	s	file:
thread	thpool.c	/^}thread;$/;"	t	typeref:struct:thread	file:
thread::id	thpool.c	/^	uint_t id;						\/\/线程编号$/;"	m	struct:thread	file:	access:public
thread::thread	thpool.c	/^	pthread_t thread;				\/\/线程ID$/;"	m	struct:thread	file:	access:public
thread_exit	thpool.c	/^static void thread_exit()$/;"	f	file:
thread_exit	thpool.c	/^static void thread_exit();$/;"	p	file:
thread_init	thpool.c	/^static thread * thread_init(uint_t id,void *arg);$/;"	p	file:	signature:(uint_t id,void *arg)
thread_init	thpool.c	/^thread_init(uint_t id,void *arg)$/;"	f	file:	signature:(uint_t id,void *arg)
uint_t	thpool.h	/^typedef unsigned int uint_t;$/;"	t
